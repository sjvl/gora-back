#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('gora-back:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


/**
 * Socket.IO.
 */
var socketIo = require('socket.io');
var io = require('socket.io')(server, {
  cors: {
    origin: ['http://localhost:3001', 'https://gora-iota.vercel.app'],
    // origin: 'https://gora-iota.vercel.app',
    methods: ['GET', 'POST'],
    credentials: true
  }
});

// Gestion des connexions WebSocket

let state = []
io.on('connection', (socket) => {
  console.log(socket.id, 'is connected');

  // Join a room when a client connects
  socket.on('join', (spaceId) => {
    socket.join(spaceId);
    console.log(socket.id, 'join the room', spaceId)

    // Envoyer les données des joueurs au nouveau
    const otherPlayers = state.filter(e => e.id !== socket.id);
    // console.log('otherplayers', otherPlayers)
    socket.emit('otherPlayers', otherPlayers);

    // Émettre un événement personnalisé pour informer les clients de l'entrée d'un nouveau membre
    socket.to(spaceId).emit('join', socket.id);
  });

 

  // When a client sends data
  socket.on('data', (data) => {
    // Emit data to all clients in the room except the sender
    socket.to(data.room).emit('data', data);

    //store data on backend
    let tmp = state.findIndex(e => e.id === data.id)
    if(tmp < 0){
      state.push(data)
    }else {
      state[tmp] = data
    }
    // console.log(state)
  });

  // Gestion de la déconnexion
  socket.on('disconnect', () => {

    // remove data from backend
    let tmp = state.findIndex(e => e.id === socket.id)
    if(tmp > -1){
      socket.to(state[tmp].room).emit('remove', state[tmp].id);
      state.splice(tmp, 1)
    }
    // console.log(state)
    console.log(socket.id, 'is disconnected');
  });
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
