#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('gora-back:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


/**
 * Socket.IO.
 */
var socketIo = require('socket.io');
var io = require('socket.io')(server, {
  cors: {
    origin: ['http://localhost:3001', 'https://gora-iota.vercel.app'],
    // origin: 'https://gora-iota.vercel.app',
    methods: ['GET', 'POST'],
    credentials: true
  }
});

// Gestion des connexions WebSocket
let rooms = {}; // Stocker les données des joueurs par room

io.on('connection', (socket) => {
  console.log(socket.id, 'is connected');

  // Connexion à une room
  socket.on('join', (spaceId) => {
    socket.join(spaceId);
    console.log(socket.id, 'join the room', spaceId)

    // Envoyer les données des joueurs au nouveau
    const otherPlayers = rooms[spaceId] ? rooms[spaceId].filter(e => e.id !== socket.id) : [];
    if(otherPlayers.length) socket.emit('otherPlayers', otherPlayers);
    // Créer le tableau pour la room si elle n'existe pas déjà
    if (!rooms[spaceId]) {
      rooms[spaceId] = [];
    }

    // Émettre un événement personnalisé pour informer les joueurs de l'entrée d'un nouveau
    socket.to(spaceId).emit('join', socket.id);
  });

  //webRTC
  socket.on('signal', (data) => {
    io.to(data.room).emit('signal', data);
  });

  // Quand un joueur envoie ses données
  socket.on('data', (data) => {
    // Envoyer cette data à tous les autres
    socket.to(data.room).emit('data', data);

    // Store data on backend
    let roomData = rooms[data.room];
    let tmp = roomData.findIndex(e => e.id === data.id)
    if(tmp < 0){
      roomData.push(data)
    } else {
      roomData[tmp] = data
    }
  });

  // Gestion de la déconnexion
  socket.on('disconnect', () => {
    // Remove data from backend
    for (let room in rooms) {
      let tmp = rooms[room].findIndex(e => e.id === socket.id)
      if(tmp > -1){
        socket.to(room).emit('remove', rooms[room][tmp].id);
        rooms[room].splice(tmp, 1)
      }
    }
    console.log(socket.id, 'is disconnected');
  });
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
